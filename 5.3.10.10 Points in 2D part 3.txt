
Objectives

Familiarize the student with:

    modelling real-world entities with classes and objects;
    interactions between objects of the same type.

Scenario

Use the code from the previous exercise as a starting point.

It's sometimes useful in computer graphics to detect if three or more points in a 2D space are collinear.

Use the code from your previous example and add the method contains() to the Line2D class that will check if a given point belongs to that line.

Your program should read in two sets of x and y coordinates and construct an object of the class Line2D based on those two points.

Then, your program should read a third point and determine if it's a part of the same line.

The output of your program should just be the verdict "collinear" or "not collinear".

Remember that comparing floating-point values in C++ might be a bit tricky.

Example input
0 0
3 6
-2 -4

Example output
collinear

Example input
2 2
-2 0
0 0

Example output
not collinear
==================================================================================================

#include <iostream>
#include <string>
#include <sstream>

using namespace std;

class Point2D{
public:
  Point2D(double x=0, double y=0);
  ~Point2D();
  //string toString();  
  // ...
  double set_x(string inp);
  double get_x();
  double set_y(string inp);
  double get_y();
  
private:
  double x;
  double y;
};

class Line2D{
public:
  Line2D(double sl=0, double y_int=0);
  void line2D(Point2D pointA, Point2D pointB);
  ~Line2D();  
  //string toString();
  double get_slope();
  double get_y_intercept();
  bool contains(Point2D point);
  // ...
private:
  double slope;
  double y_intercept;
};

// implement Point2D and Line2D methods
////////////////Point2D class//////////
Point2D::Point2D(double xx, double yy)
{
  x=xx;
  y=yy;
}
Point2D::~Point2D()
{
}
double Point2D::set_x(string inp)
{
  string s=inp.substr(0, inp.find(' '));
  x=stod(s.c_str());

  return x;
}
double Point2D::get_x()
{
  return x;
}
double Point2D::set_y(string inp)
{
  string s=inp.substr(inp.find(' ')+1, inp.length());
  y=stod(s.c_str());

  return y;
}
double Point2D::get_y()
{
  return y;
}
////////////////Line2D class//////////
Line2D::Line2D(double sl, double y_int)
{
  slope=sl;
  y_intercept=y_int;
}
void Line2D::line2D(Point2D pointA, Point2D pointB)
{
  slope=(pointA.get_y()-pointB.get_y())/(pointA.get_x()-pointB.get_x());
  y_intercept=pointA.get_y()-slope*pointA.get_x();
}
Line2D::~Line2D()
{
}
double Line2D::get_slope()
{
  return slope;
}
double Line2D::get_y_intercept()
{
  return y_intercept;
}
bool Line2D::contains(Point2D point)
{
  double y=point.get_y();
  double n=slope*point.get_x()-y_intercept;
  if(y==n) return true;
  return false;
}

int main()
{
  string input;
  string input2;
  string input3;

  getline(cin, input);
  Point2D p1;
  p1.set_x(input);
  p1.set_y(input);

  getline(cin, input2);
  Point2D p2;
  p2.set_x(input2);
  p2.set_y(input2);

  getline(cin, input3);
  Point2D p3;
  p3.set_x(input3);
  p3.set_y(input3);

  Line2D line;
  line.line2D(p1, p2);
  if(line.contains(p3))
    cout<<"collinear"<<endl;
  else cout<<"not collinear"<<endl;  

  return 0;
}