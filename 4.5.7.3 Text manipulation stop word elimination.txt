
Objectives

Familiarize the student with:

    reading data in a specified format.

Scenario

A common practice in search engines is to remove very common words – that add little value – from a document before further processing.

These words are known as "stop words" and include words like "a", "the", "or", etc.

Write a program that will read two lines of text. The first line will consist of comma-separated stop words and the second line is text to be processed. Your program should remove all stop words from the text to be processed.

Your program should assume lower case for stop words and ignore the case in the processed words.

Example input
has,no,this
This sentence has no stop words

Example output
sentence stop words

Example input
a,has
Mary has a little lamb

Example output
Mary little lamb
==========================================================================================================

#include <string>
#include <iostream>

using namespace std;
int dl_stop, dl_nowy;
int main()
{
  string stop_words;
  getline(cin, stop_words);
  string sentence;
  getline(cin, sentence);
  
  // remove stop_words from sentence here
  dl_stop = stop_words.length();
  for(int i=0; i<dl_stop; i++)
  {
    size_t przec=stop_words.find(',');
    if(przec!=string::npos)
    {
      string now = stop_words.substr(0, przec);
      string nowy = " "+now+" ";
      size_t word=sentence.find(nowy);
      dl_nowy=nowy.length();
      
      size_t poz_nowy=sentence.find(nowy);
      if(poz_nowy!=string::npos)
      {
        sentence.erase(poz_nowy, dl_nowy-1);        
      }
      
      stop_words.erase(0, przec+1);
      //cout<<nowy<<" "<<dl_nowy<<endl;
    }
    else if(przec==string::npos)
    {
      string now = stop_words.substr(0, stop_words.length());
      string nowy = " "+now+" ";
      size_t word=sentence.find(nowy);
      dl_nowy=nowy.length();
      
      size_t poz_nowy=sentence.find(nowy);
      if(poz_nowy!=string::npos)
      {
        sentence.erase(poz_nowy, dl_nowy-1);        
      }
      
      //stop_words.erase(0, przec+1);
      //cout<<nowy<<" "<<dl_nowy<<endl;
    }
  } cout<<stop_words<<endl;
  cout << sentence << "\n";

  return 0;
}