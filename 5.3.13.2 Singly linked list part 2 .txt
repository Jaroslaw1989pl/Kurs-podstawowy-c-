Objectives

Familiarize the student with:

    implementing data structures in C++;
    preventing memory leaks and deallocating acquired resources.

Scenario

Let's continue working on our list.

We're currently making one serious error: we're not cleaning up after ourselves and we're leaking memory.

Add a destructor to your List class. The destructor should delete all the Nodes in the list, leaving it empty.

To help you make sure that you've deleted all the elements, we've added some text output to the Node constructor and destructor.


+Node
+Node
+Node
+Node
-Node
-Node
-Node
-Node
================================================================================================

#include <iostream>

using namespace std;

class Node
{
public:
  Node(int val);
  ~Node();
  int value;
  Node* next;
};
Node::Node(int val) : value(val), next(nullptr)
{
  value=val;
  //cout<<"+Node\n";
}
Node::~Node()
{
  //cout<<"-Node\n";
}

class List
{
public:
  List();
  ~List();
  void push_front(int value);
  bool pop_front(int &value);
  int getValue()
  {
    return head->value;
  }
  int size;
private:
  Node* head;
};

List::List() : head(nullptr)
{
  head=NULL;
}
List::~List()
{
  if(head==NULL)
    cout<<"Stos jest pusty - brak danych do usuniecia\n";
  else
    cout<<"Usuwanie stosu\n";
}
void List::push_front(int val)
{
  Node* new_head = new Node(val);
  new_head->next = head;
  head=new_head;
  ++size;
  //cout<<"Head:"<<new_head->value<<" Next:"<<new_head->next<<endl;
}

bool List::pop_front(int &val)
{
  // implement the pop
  // don't forget to delete the popped node!
  // and fix the return value
  if(head!=NULL)
  {
    //cout<<"Head:"<<head->next<<" Value:"<<head->value<<endl; 
    --size;
    Node *old_head;
    old_head = head;
    head = head->next;
    delete old_head;   
    return true;
   
  }
  else
  {
    cout<<"Stos pusty\n";
    return false;
  }
 
}

int main()
{
  List *list = new List();
 
  //
  list->push_front(1);
  list->push_front(2);
  list->push_front(3);
  list->push_front(4); 
 
  int value = list->getValue();
  while (list->size>0)
  {
    value = list->getValue();
    list->pop_front(value);
    cout << value << endl;   
  }

  return 0;
}