
Objectives

Familiarize the student with:

    implementing data structures in C++;
    keeping data structures consistent at all times.

Scenario

Now, our list implementation can be easily used to create a stack implementation, since we can push and pop items to the front of the list.

Another common data structure is the queue. A queue allows us to add elements to one side of the data structure, but remove them only from the other side.

So, queues allow us to process items in order of appearance, which is often considered fair. This is a common scenario in many cases:

    when handling calls from customers, we want to answer the calls in order, so we don't make one of our customers wait forever;
    ticket reservation systems should process requests in order of appearance, so someone who wanted the ticket first should get it.

To enable us to use our list as a queue, we'll add a new method to it: push_back().

One strategy to add an element to the back of the list would be to always search for the last element and add the new element to the list.

This, unfortunately, is a lot of work just to add a single element.

Another approach is to create a new pointer that will always point to the last node in the list. Let's try this approach.

1
2
3
4
===============================================================================================

#include <iostream>

using namespace std;

class Node
{
public:
  Node(int val);
  ~Node();
  int value;
  Node* next;
};
Node::Node(int val) : value(val), next(nullptr)
{
  value=val;
}
Node::~Node()
{
}

class List
{
public:
  List();
  ~List();
  void push_front(int val);
  bool pop_front(int &val);
  void push_back(int val);
  int getValue()
  {
    return head->value;
  }
  int size();
private:
  Node* head;
  Node* tail;
  int s;
};

List::List() : head(nullptr)
{
  head=NULL;
  //tail=NULL;
  s=0;
}
List::~List()
{
  if(head==NULL)
    cout<<"Stos jest pusty - brak danych do usuniecia\n";
  else
  {
    cout<<"Usuwanie stosu\n";
    int val=getValue();
    while(head!=NULL)
    {
      val = getValue();
      pop_front(val);
      cout << val << endl; 
    }
  }   
}
void List::push_front(int val)
{
  // You need to fix this part!
  // The tail pointer needs to be modified only when the first element is added
  Node* new_head = new Node(val);
  new_head->next = head;
  head=new_head;
  s++;
}

bool List::pop_front(int &val)
{
  if(head!=NULL)
  {
    Node *old_head;
    old_head = head;
    head = head->next;
    delete old_head;
    s--; 
    return true;  
  }
  else
  {
    cout<<"Stos pusty\n";
    return false;
  }
}

void List::push_back(int val)
{
  Node *new_tail = new Node(val);
  new_tail->next = NULL;
 
  if(head==NULL)
  {
    push_front(val);
    //head=new_tail;
  }
  else
  {
    Node *temp = head;
    while(temp->next!=NULL)
    {
      temp=temp->next;
    }
    temp->next=new_tail;
    s++;   
  }
 
}
int List::size()
{
  return s;
}

int main()
{
  List list;
  //
  list.push_back(1);
  list.push_back(2);
  list.push_back(3);
  list.push_back(4);
  cout<<"--------------------------\n";
  cout<<"Size:"<<list.size()<<endl;
  int value = list.getValue();
  while (list.size()>0)
  {
    value = list.getValue();
    list.pop_front(value);
    cout << value << endl;  
  }
  list.~List();
  return 0;
}