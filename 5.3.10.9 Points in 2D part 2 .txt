Objectives

Familiarize the student with:

    modelling real-world entities with classes and objects;
    interactions between objects of the same type;
    creating objects based on objects of other objects of custom classes.

Scenario

A line in two-dimensional space can be represented by two parameters, the slope and the y-intercept.

If we represent the slope as a and the y-intercept as b, then all points that belong to that line can be expressed by the equation y = ax + b.

Knowing two points that belong to a line, we are able to calculate the slope and the y-intercept of the line.

Your program should read two sets of x and y coordinates and construct an object of the class Line2D, based on those two points.

Output the line in the form "y = [slope]x [+-] [y_intercept]

Example input
0 0
3 6

Example output
y = 2x + 0


Example input
2 2
-2 0

Example output
y = 0.5x + 1


Example input
-1 1
2 -4

Example output
y = -2x - 1
================================================================================================

#include <iostream>
#include <string>
#include <sstream>

using namespace std;

class Point2D{
public:
  Point2D(double x=0, double y=0);
  ~Point2D();
  string toString();
  
  // ...
  double set_x(string inp);
  double get_x();
  double set_y(string inp);
  double get_y();
  
private:
  double x;
  double y;
};

class Line2D{
public:
  Line2D(double sl=0, double y_int=0);
  void line2D(Point2D pointA, Point2D pointB);
  ~Line2D();  
  string toString();
  double get_slope();
  double get_y_intercept();
  // ...
private:
  double slope;
  double y_intercept;
};

// implement Point2D and Line2D methods
////////////////Point2D class//////////
Point2D::Point2D(double xx, double yy)
{
  x=xx;
  y=yy;
}
Point2D::~Point2D()
{
}
double Point2D::set_x(string inp)
{
  string s=inp.substr(0, inp.find(' '));
  x=stod(s.c_str());

  return x;
}
double Point2D::get_x()
{
  return x;
}
double Point2D::set_y(string inp)
{
  string s=inp.substr(inp.find(' ')+1, inp.length());
  y=stod(s.c_str());

  return y;
}
double Point2D::get_y()
{
  return y;
}
////////////////Line2D class//////////
Line2D::Line2D(double sl, double y_int)
{
  slope=sl;
  y_intercept=y_int;
}
void Line2D::line2D(Point2D pointA, Point2D pointB)
{
  slope=(pointA.get_y()-pointB.get_y())/(pointA.get_x()-pointB.get_x());
  y_intercept=pointA.get_y()-slope*pointA.get_x();
}
Line2D::~Line2D()
{
}
double Line2D::get_slope()
{
  return slope;
}
double Line2D::get_y_intercept()
{
  return y_intercept;
}
string Line2D::toString()
{
  stringstream ss;
  ss<<get_slope();
  string slope;
  ss>>slope;

  stringstream ss2;
  ss2<<get_y_intercept();
  string y_int;
  ss2>>y_int;

  return "y = "+slope+"x + "+y_int;
}

int main()
{
  string input;
  string input2;

  getline(cin, input);
  Point2D p1;
  p1.set_x(input);
  p1.set_y(input);

  getline(cin, input2);
  Point2D p2;
  p2.set_x(input2);
  p2.set_y(input2);

  Line2D line;
  line.line2D(p1, p2);
  cout<<line.toString();

  return 0;
}