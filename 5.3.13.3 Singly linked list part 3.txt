
Objectives

Familiarize the student with:

    implementing data structures in C++;
    providing derived data about the implemented data structure.

Scenario

Let's continue working on our list.

One piece of information that might be useful is the size of the list.

Add the method size() to your list implementation.

As the name suggests, it should return the number of stored elements.

pushed 0 size: 1
pushed 1 size: 2
pushed 2 size: 3
pushed 3 size: 4
pushed 4 size: 5
pushed 5 size: 6

popped 5 size: 5
popped 4 size: 4
popped 3 size: 3
==============================================================================================

#include <iostream>

using namespace std;

class Node
{
public:
  Node(int val);
  ~Node();
  int value;
  Node* next;
};
Node::Node(int val) : value(val), next(nullptr)
{
  value=val;
}
Node::~Node()
{
}

class List
{
public:
  List();
  ~List();
  void push_front(int value);
  bool pop_front(int &value);
  int getValue()
  {
    return head->value;
  }
  int size();
private:
  Node* head;
  int s;
};

List::List() : head(nullptr)
{
  head=NULL;
  s=0;
}
List::~List()
{
  if(head==NULL)
    cout<<"Stos jest pusty - brak danych do usuniecia\n";
  else
    cout<<"Usuwanie stosu\n";
}
void List::push_front(int val)
{
  Node* new_head = new Node(val);
  new_head->next = head;
  head=new_head;
  s++;
}

bool List::pop_front(int &val)
{
  if(head!=NULL)
  {
    Node *old_head;
    old_head = head;
    head = head->next;
    delete old_head;
    s--;   
    return true;    
  }
  else
  {
    cout<<"Stos pusty\n";
    return false;
  } 
}
int List::size()
{
  return s;
}

int main()
{
  List list;
  for (int i = 0; i <= 5; i++)
  {
    list.push_front(i);
    cout << "pushed " << i << ", size: " << list.size() << endl;
  }
  cout << endl;
  for (int i = 0; i < 3; i++)
  {
    int value = list.getValue();
    list.pop_front(value);
    cout << "popped " << value << ", size: " << list.size() << endl;
  }
  return 0;
}