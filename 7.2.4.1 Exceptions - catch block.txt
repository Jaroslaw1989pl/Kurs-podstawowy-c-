
Objectives

Familiarize the student with:

    handling exceptions;
    writing his/her own exception classes;
    passing additional information in exceptions;

Scenario

Write a program that calculates the area of some simple figures (i.e. a square and a rectangle). One function per figure. Check if the function arguments are greater than 0 â€“ if they aren't, throw an exception. This program should use your own exceptions to communicate with a higher-level code. Add some attribute in your exception to pass a message to the user. Some boilerplate code is included below.

Example input
2 1

Example output
4 2

Example input
-10 6

Example output
Your input is not valid. The area can't be negative.
===================================================================================================

#include <iostream>

using namespace std;
//add your own exception class here
class ExceptionClass
{
  float a, b;
public:
  const char * what()
  {
    return "Your input is not valid. The area can't be negative.\n";
  }
  void setA(float a)
  {
    this->a=a;
  }
  void setB(float a, float b)
  {
    this->a=a;
    this->b=b;
  }
};
//add functions code here
float square_area(float x)
{
  if(x<=0){
    ExceptionClass exc;
    exc.setA(x);
    throw exc;
  }
  return x*x;
}
float rectangle_area(float x, float y)
{
  if(x<=0){
    ExceptionClass exc;
    exc.setA(x);
    throw exc;
  }
  if(y<=0){
    ExceptionClass exc;
    exc.setA(x);
    exc.setB(x, y);
    throw exc;
  }
  return x*y;
}

int main(void) {
	float a, b, r;
	cin >> a;
	cin >> b;
	try
	{
		float rsquare = square_area(a);
		float rrectangle = rectangle_area(a,b);
		cout << rsquare << endl << rrectangle << endl;
	}
	//add a suitable catch block here
  catch(ExceptionClass e)
  {
    cout<<e.what();
    cout<<"value A: "<<a<<" | "<<"value B: "<<b<<endl;
  }
	return 0;
}